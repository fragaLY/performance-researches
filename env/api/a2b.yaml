openapi: 3.0.3

info:
  title: A2B Service
  description: API Specification for A2B Service. Goal of service is to aggregate all a2b logic.
  version: 1.0.0
  contact:
    name: Vadzim Kavalkou
    url: https://www.linkedin.com/in/vadzimkavalkou/
    email: vadzim.kavalkou@gmail.com
  license:
    name: GPL 3.0

servers:
  - url: http://localhost:8080/api/v1/

tags:
  - name: A2BService
    description: A2B Service Open API specification

paths:
  /countries:
    get:
      tags:
        - A2B Service
      summary: Get all countries in system
      description: Get all countries. Countries are retrieved.
      operationId: countriesRetrieving
      responses:
        "200":
          description: List of countries
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Countries"
        "500":
          description: General application error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /countries/{id}/cities:
    get:
      tags:
        - A2B Service
      summary: Get all cities for country in system
      description: Get all cities for country. Cities are retrieved.
      operationId: citiesRetrieving
      parameters:
        - name: id
          in: path
          description: Id of country
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Cities details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cities"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        "500":
          description: General application error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /countries/{countryId}/cities/{cityId}/locations:
    get:
      tags:
        - A2B Service
      summary: Get all cities locations for country in system
      description: Get all cities locations for country. Locations are retrieved.
      operationId: locationsRetrieving
      parameters:
        - name: countryId
          in: path
          description: Id of country
          required: true
          schema:
            type: integer
            format: int64
        - name: cityId
          in: path
          description: Id of city
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Locations details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Locations"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        "500":
          description: General application error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /transfers:
    get:
      tags:
        - A2B Service
      summary: Get all transfers for selected origin, destination, date
      description: Get all available transfers. Transfers are retrieved.
      operationId: transfersRetrieving
      parameters:
        - name: originId
          in: query
          description: Id of origin
          required: true
          schema:
            type: integer
            format: int64
        - name: destinationId
          in: query
          description: Id of destination
          required: true
          schema:
            type: integer
            format: int64
        - name: date
          in: query
          description: Date of transfer
          required: true
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Transfers for selected origin, destination, date
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transfers"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        "500":
          description: General application error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /users/{userId}/transfers:
    get:
      tags:
        - A2B Service
      summary: Get user's transfers
      description: Get user's transfers. User's transfers are retrieved.
      operationId: userTransfersRetrieving
      parameters:
        - name: userId
          in: path
          description: Id of user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User's transfers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersTransfers"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        "500":
          description: General application error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /users/{userId}/transfers{transferId}:
    post:
      tags:
        - A2B Service
      summary: Assign the transfer to user
      description: Assign the transfer to user
      operationId: assignTransferToUser
      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/TransferAssigning'
      parameters:
        - name: userId
          in: path
          description: Id of user
          required: true
          schema:
            type: integer
            format: int64
        - name: transferId
          in: path
          description: Id of transfer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "201":
          description: Transfer had been assigned
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        "404":
          description: Challenge not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        "500":
          description: General application error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
    get:
      tags:
        - A2B Service
      summary: Get user's transfer
      description: Get user's transfer. User's transfer is retrieved.
      operationId: userTransferRetrieving
      parameters:
        - name: userId
          in: path
          description: Id of user
          required: true
          schema:
            type: integer
            format: int64
        - name: transferId
          in: path
          description: Id of transfer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User's transfers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserTransfer"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        "500":
          description: General application error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
    put:
      tags:
        - A2B Service
      summary: Update user's transfer
      description: Update user's transfer
      operationId: updateUserTransfer
      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/UserTransferEdition'
      parameters:
        - name: userId
          in: path
          description: Id of user
          required: true
          schema:
            type: integer
            format: int64
        - name: transferId
          in: path
          description: Id of transfer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: User transfer updated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        "500":
          description: General application error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /users/{userId}:
    get:
      tags:
        - A2B Service
      summary: Get user's profile
      description: Get user's profile. User's profile is retrieved.
      operationId: userProfileRetrieving
      parameters:
        - name: userId
          in: path
          description: Id of user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User's profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        "500":
          description: General application error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
    put:
      tags:
        - A2B Service
      summary: Update user's profile
      description: Update user's profile
      operationId: updateUserProfile
      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/UserProfileEdition'
      parameters:
        - name: userId
          in: path
          description: Id of user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: User profile updated
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        "500":
          description: General application error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'

components:
  schemas:
    Countries:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 1
          name:
            type: string
            example: "Republic of Belarus"
            minLength: 1
            maxLength: 50
          code:
            type: string
            example: "BY"
            minLength: 1
            maxLength: 10
    Cities:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 1
          countryId:
            type: integer
            format: int64
            example: 2
          name:
            type: string
            example: "Mogilev"
            minLength: 1
            maxLength: 50
          code:
            type: string
            example: "22"
            minLength: 1
    Locations:
      type: array
      items:
        type: object
        properties:
          cityId:
            type: integer
            format: int64
            example: 1
          point:
            type: object
            properties:
              latitude:
                type: number
                format: double
                minimum: -90
                maximum: 90
                exclusiveMinimum: true
                exclusiveMaximum: true
              longitude:
                type: number
                format: double
                minimum: -180
                maximum: 180
                exclusiveMinimum: true
                exclusiveMaximum: true
    Transfers:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 1
          origin:
            type: integer
            format: int64
            example: 2
          destination:
            type: integer
            format: int64
            example: 3
          capacity:
            type: integer
            example: 26
          duration:
            type: string
            example: "[2022-04-20 02:00:00,2022-05-11 09:00:00]"
          price:
            type: number
            format: double
            example: 99.9
          description:
            type: string
            example: "We are not waiting for you. We are angry."
    TransferAssigning:
      type: object
      properties:
        description:
          type: string
          example: "I would like to have a cup of coffee."
    UserTransfer:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 1
        transferId:
          type: integer
          format: int64
          example: 2
        destination:
          type: integer
          format: int64
          example: 3
        state:
          type: string
          enum: [ "COMPLETED", "CANCELED", "BOOKED" ]
        description:
          type: string
          example: "I would like to have a cup of coffee."
    UsersTransfers:
      type: array
      items:
        type: object
        properties:
          userId:
            type: integer
            format: int64
            example: 1
          transferId:
            type: integer
            format: int64
            example: 2
          destination:
            type: integer
            format: int64
            example: 3
          state:
            type: string
            enum: [ "COMPLETED", "CANCELED", "BOOKED" ]
          description:
            type: string
            example: "I would like to have a cup of coffee."
    UserTransferEdition:
      type: object
      properties:
        state:
          type: string
          enum: [ "COMPLETED", "CANCELED", "BOOKED" ]
        description:
          type: string
          example: "I would like to have a cup of tea."
      required:
        - state
        - description
    UserProfile:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 50
        phone:
          type: string
          minLength: 1
          maxLength: 50
    UserProfileEdition:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
      required:
        - firstName
        - lastName
    BadRequestException:
      type: object
      properties:
        status:
          type: string
          default: BAD_REQUEST
          example: "BAD_REQUEST"
        code:
          type: integer
          default: 400
          example: 400
        message:
          type: string
          example: "Incorrect request data"
      required:
        - status
        - code
        - message
    NotFoundException:
      type: object
      properties:
        status:
          type: string
          default: NOT_FOUND
          example: "NOT_FOUND"
        code:
          type: integer
          default: 404
          example: 404
        message:
          type: string
          example: "Challenge not found"
      required:
        - status
        - code
        - message
    ServerException:
      type: object
      properties:
        status:
          type: string
          default: INTERNAL_SERVER_ERROR
          example: "INTERNAL_SERVER_ERROR"
        code:
          type: integer
          default: 500
          example: 500
        message:
          type: string
          example: "Huston we have a problem"
      required:
        - status
        - code
        - message