/*
 * A2B Service
 * API Specification for A2B Service. Goal of service is to aggregate all a2b logic.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vadzim.kavalkou@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BadRequestException;
import org.threeten.bp.LocalDate;
import org.openapitools.client.model.NotFoundException;
import org.openapitools.client.model.ServerException;
import org.openapitools.client.model.TransferAssigning;
import org.openapitools.client.model.UserProfile;
import org.openapitools.client.model.UserProfileEdition;
import org.openapitools.client.model.UserTransfer;
import org.openapitools.client.model.UserTransferEdition;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class A2BServiceApi {
    private ApiClient localVarApiClient;

    public A2BServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public A2BServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for assignTransferToUser
     *
     * @param userId            Id of user (required)
     * @param transferId        Id of transfer (required)
     * @param transferAssigning (required)
     * @param _callback         Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Transfer had been assigned </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Challenge not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call assignTransferToUserCall(Long userId, Long transferId, TransferAssigning transferAssigning, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transferAssigning;

        // create path and map variables
        String localVarPath = "/users/{userId}/transfers{transferId}"
                .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
                .replaceAll("\\{" + "transferId" + "\\}", localVarApiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignTransferToUserValidateBeforeCall(Long userId, Long transferId, TransferAssigning transferAssigning, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling assignTransferToUser(Async)");
        }

        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling assignTransferToUser(Async)");
        }

        // verify the required parameter 'transferAssigning' is set
        if (transferAssigning == null) {
            throw new ApiException("Missing the required parameter 'transferAssigning' when calling assignTransferToUser(Async)");
        }


        okhttp3.Call localVarCall = assignTransferToUserCall(userId, transferId, transferAssigning, _callback);
        return localVarCall;

    }

    /**
     * Assign the transfer to user
     * Assign the transfer to user
     *
     * @param userId            Id of user (required)
     * @param transferId        Id of transfer (required)
     * @param transferAssigning (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Transfer had been assigned </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Challenge not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public void assignTransferToUser(Long userId, Long transferId, TransferAssigning transferAssigning) throws ApiException {
        assignTransferToUserWithHttpInfo(userId, transferId, transferAssigning);
    }

    /**
     * Assign the transfer to user
     * Assign the transfer to user
     *
     * @param userId            Id of user (required)
     * @param transferId        Id of transfer (required)
     * @param transferAssigning (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Transfer had been assigned </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Challenge not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> assignTransferToUserWithHttpInfo(Long userId, Long transferId, TransferAssigning transferAssigning) throws ApiException {
        okhttp3.Call localVarCall = assignTransferToUserValidateBeforeCall(userId, transferId, transferAssigning, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Assign the transfer to user (asynchronously)
     * Assign the transfer to user
     *
     * @param userId            Id of user (required)
     * @param transferId        Id of transfer (required)
     * @param transferAssigning (required)
     * @param _callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Transfer had been assigned </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Challenge not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call assignTransferToUserAsync(Long userId, Long transferId, TransferAssigning transferAssigning, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignTransferToUserValidateBeforeCall(userId, transferId, transferAssigning, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for citiesRetrieving
     *
     * @param id        Id of country (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Cities details </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call citiesRetrievingCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/countries/{id}/cities"
                .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call citiesRetrievingValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling citiesRetrieving(Async)");
        }


        okhttp3.Call localVarCall = citiesRetrievingCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get all cities for country in system
     * Get all cities for country. Cities are retrieved.
     *
     * @param id Id of country (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Cities details </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public List<Object> citiesRetrieving(Long id) throws ApiException {
        ApiResponse<List<Object>> localVarResp = citiesRetrievingWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get all cities for country in system
     * Get all cities for country. Cities are retrieved.
     *
     * @param id Id of country (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Cities details </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<Object>> citiesRetrievingWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = citiesRetrievingValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all cities for country in system (asynchronously)
     * Get all cities for country. Cities are retrieved.
     *
     * @param id        Id of country (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Cities details </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call citiesRetrievingAsync(Long id, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = citiesRetrievingValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for countriesRetrieving
     *
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> List of countries </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call countriesRetrievingCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countriesRetrievingValidateBeforeCall(final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = countriesRetrievingCall(_callback);
        return localVarCall;

    }

    /**
     * Get all countries in system
     * Get all countries. Countries are retrieved.
     *
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> List of countries </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public List<Object> countriesRetrieving() throws ApiException {
        ApiResponse<List<Object>> localVarResp = countriesRetrievingWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all countries in system
     * Get all countries. Countries are retrieved.
     *
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> List of countries </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<Object>> countriesRetrievingWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = countriesRetrievingValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all countries in system (asynchronously)
     * Get all countries. Countries are retrieved.
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> List of countries </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call countriesRetrievingAsync(final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = countriesRetrievingValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for locationsRetrieving
     *
     * @param countryId Id of country (required)
     * @param cityId    Id of city (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Locations details </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call locationsRetrievingCall(Long countryId, Long cityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/countries/{countryId}/cities/{cityId}/locations"
                .replaceAll("\\{" + "countryId" + "\\}", localVarApiClient.escapeString(countryId.toString()))
                .replaceAll("\\{" + "cityId" + "\\}", localVarApiClient.escapeString(cityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationsRetrievingValidateBeforeCall(Long countryId, Long cityId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'countryId' is set
        if (countryId == null) {
            throw new ApiException("Missing the required parameter 'countryId' when calling locationsRetrieving(Async)");
        }

        // verify the required parameter 'cityId' is set
        if (cityId == null) {
            throw new ApiException("Missing the required parameter 'cityId' when calling locationsRetrieving(Async)");
        }


        okhttp3.Call localVarCall = locationsRetrievingCall(countryId, cityId, _callback);
        return localVarCall;

    }

    /**
     * Get all cities locations for country in system
     * Get all cities locations for country. Locations are retrieved.
     *
     * @param countryId Id of country (required)
     * @param cityId    Id of city (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Locations details </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public List<Object> locationsRetrieving(Long countryId, Long cityId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = locationsRetrievingWithHttpInfo(countryId, cityId);
        return localVarResp.getData();
    }

    /**
     * Get all cities locations for country in system
     * Get all cities locations for country. Locations are retrieved.
     *
     * @param countryId Id of country (required)
     * @param cityId    Id of city (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Locations details </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<Object>> locationsRetrievingWithHttpInfo(Long countryId, Long cityId) throws ApiException {
        okhttp3.Call localVarCall = locationsRetrievingValidateBeforeCall(countryId, cityId, null);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all cities locations for country in system (asynchronously)
     * Get all cities locations for country. Locations are retrieved.
     *
     * @param countryId Id of country (required)
     * @param cityId    Id of city (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Locations details </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call locationsRetrievingAsync(Long countryId, Long cityId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationsRetrievingValidateBeforeCall(countryId, cityId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for transfersRetrieving
     *
     * @param originId      Id of origin (required)
     * @param destinationId Id of destination (required)
     * @param date          Date of transfer (required)
     * @param _callback     Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Transfers for selected origin, destination, date </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call transfersRetrievingCall(Long originId, Long destinationId, LocalDate date, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (originId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originId", originId));
        }

        if (destinationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationId", destinationId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transfersRetrievingValidateBeforeCall(Long originId, Long destinationId, LocalDate date, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'originId' is set
        if (originId == null) {
            throw new ApiException("Missing the required parameter 'originId' when calling transfersRetrieving(Async)");
        }

        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException("Missing the required parameter 'destinationId' when calling transfersRetrieving(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling transfersRetrieving(Async)");
        }


        okhttp3.Call localVarCall = transfersRetrievingCall(originId, destinationId, date, _callback);
        return localVarCall;

    }

    /**
     * Get all transfers for selected origin, destination, date
     * Get all available transfers. Transfers are retrieved.
     *
     * @param originId      Id of origin (required)
     * @param destinationId Id of destination (required)
     * @param date          Date of transfer (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Transfers for selected origin, destination, date </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public List<Object> transfersRetrieving(Long originId, Long destinationId, LocalDate date) throws ApiException {
        ApiResponse<List<Object>> localVarResp = transfersRetrievingWithHttpInfo(originId, destinationId, date);
        return localVarResp.getData();
    }

    /**
     * Get all transfers for selected origin, destination, date
     * Get all available transfers. Transfers are retrieved.
     *
     * @param originId      Id of origin (required)
     * @param destinationId Id of destination (required)
     * @param date          Date of transfer (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Transfers for selected origin, destination, date </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<Object>> transfersRetrievingWithHttpInfo(Long originId, Long destinationId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = transfersRetrievingValidateBeforeCall(originId, destinationId, date, null);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all transfers for selected origin, destination, date (asynchronously)
     * Get all available transfers. Transfers are retrieved.
     *
     * @param originId      Id of origin (required)
     * @param destinationId Id of destination (required)
     * @param date          Date of transfer (required)
     * @param _callback     The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Transfers for selected origin, destination, date </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call transfersRetrievingAsync(Long originId, Long destinationId, LocalDate date, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = transfersRetrievingValidateBeforeCall(originId, destinationId, date, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateUserProfile
     *
     * @param userId             Id of user (required)
     * @param userProfileEdition (required)
     * @param _callback          Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> User profile updated </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateUserProfileCall(Long userId, UserProfileEdition userProfileEdition, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userProfileEdition;

        // create path and map variables
        String localVarPath = "/users/{userId}"
                .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserProfileValidateBeforeCall(Long userId, UserProfileEdition userProfileEdition, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserProfile(Async)");
        }

        // verify the required parameter 'userProfileEdition' is set
        if (userProfileEdition == null) {
            throw new ApiException("Missing the required parameter 'userProfileEdition' when calling updateUserProfile(Async)");
        }


        okhttp3.Call localVarCall = updateUserProfileCall(userId, userProfileEdition, _callback);
        return localVarCall;

    }

    /**
     * Update user&#39;s profile
     * Update user&#39;s profile
     *
     * @param userId             Id of user (required)
     * @param userProfileEdition (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> User profile updated </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public void updateUserProfile(Long userId, UserProfileEdition userProfileEdition) throws ApiException {
        updateUserProfileWithHttpInfo(userId, userProfileEdition);
    }

    /**
     * Update user&#39;s profile
     * Update user&#39;s profile
     *
     * @param userId             Id of user (required)
     * @param userProfileEdition (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> User profile updated </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> updateUserProfileWithHttpInfo(Long userId, UserProfileEdition userProfileEdition) throws ApiException {
        okhttp3.Call localVarCall = updateUserProfileValidateBeforeCall(userId, userProfileEdition, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update user&#39;s profile (asynchronously)
     * Update user&#39;s profile
     *
     * @param userId             Id of user (required)
     * @param userProfileEdition (required)
     * @param _callback          The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> User profile updated </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateUserProfileAsync(Long userId, UserProfileEdition userProfileEdition, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserProfileValidateBeforeCall(userId, userProfileEdition, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateUserTransfer
     *
     * @param userId              Id of user (required)
     * @param transferId          Id of transfer (required)
     * @param userTransferEdition (required)
     * @param _callback           Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> User transfer updated </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateUserTransferCall(Long userId, Long transferId, UserTransferEdition userTransferEdition, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userTransferEdition;

        // create path and map variables
        String localVarPath = "/users/{userId}/transfers{transferId}"
                .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
                .replaceAll("\\{" + "transferId" + "\\}", localVarApiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserTransferValidateBeforeCall(Long userId, Long transferId, UserTransferEdition userTransferEdition, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserTransfer(Async)");
        }

        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling updateUserTransfer(Async)");
        }

        // verify the required parameter 'userTransferEdition' is set
        if (userTransferEdition == null) {
            throw new ApiException("Missing the required parameter 'userTransferEdition' when calling updateUserTransfer(Async)");
        }


        okhttp3.Call localVarCall = updateUserTransferCall(userId, transferId, userTransferEdition, _callback);
        return localVarCall;

    }

    /**
     * Update user&#39;s transfer
     * Update user&#39;s transfer
     *
     * @param userId              Id of user (required)
     * @param transferId          Id of transfer (required)
     * @param userTransferEdition (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> User transfer updated </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public void updateUserTransfer(Long userId, Long transferId, UserTransferEdition userTransferEdition) throws ApiException {
        updateUserTransferWithHttpInfo(userId, transferId, userTransferEdition);
    }

    /**
     * Update user&#39;s transfer
     * Update user&#39;s transfer
     *
     * @param userId              Id of user (required)
     * @param transferId          Id of transfer (required)
     * @param userTransferEdition (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> User transfer updated </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> updateUserTransferWithHttpInfo(Long userId, Long transferId, UserTransferEdition userTransferEdition) throws ApiException {
        okhttp3.Call localVarCall = updateUserTransferValidateBeforeCall(userId, transferId, userTransferEdition, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update user&#39;s transfer (asynchronously)
     * Update user&#39;s transfer
     *
     * @param userId              Id of user (required)
     * @param transferId          Id of transfer (required)
     * @param userTransferEdition (required)
     * @param _callback           The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> User transfer updated </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateUserTransferAsync(Long userId, Long transferId, UserTransferEdition userTransferEdition, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserTransferValidateBeforeCall(userId, transferId, userTransferEdition, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for userProfileRetrieving
     *
     * @param userId    Id of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User&#39;s profile </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call userProfileRetrievingCall(Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}"
                .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userProfileRetrievingValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userProfileRetrieving(Async)");
        }


        okhttp3.Call localVarCall = userProfileRetrievingCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Get user&#39;s profile
     * Get user&#39;s profile. User&#39;s profile is retrieved.
     *
     * @param userId Id of user (required)
     * @return UserProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User&#39;s profile </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public UserProfile userProfileRetrieving(Long userId) throws ApiException {
        ApiResponse<UserProfile> localVarResp = userProfileRetrievingWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get user&#39;s profile
     * Get user&#39;s profile. User&#39;s profile is retrieved.
     *
     * @param userId Id of user (required)
     * @return ApiResponse&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User&#39;s profile </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UserProfile> userProfileRetrievingWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = userProfileRetrievingValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserProfile>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user&#39;s profile (asynchronously)
     * Get user&#39;s profile. User&#39;s profile is retrieved.
     *
     * @param userId    Id of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User&#39;s profile </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call userProfileRetrievingAsync(Long userId, final ApiCallback<UserProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = userProfileRetrievingValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserProfile>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for userTransferRetrieving
     *
     * @param userId     Id of user (required)
     * @param transferId Id of transfer (required)
     * @param _callback  Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User&#39;s transfers </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call userTransferRetrievingCall(Long userId, Long transferId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/transfers{transferId}"
                .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
                .replaceAll("\\{" + "transferId" + "\\}", localVarApiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userTransferRetrievingValidateBeforeCall(Long userId, Long transferId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userTransferRetrieving(Async)");
        }

        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling userTransferRetrieving(Async)");
        }


        okhttp3.Call localVarCall = userTransferRetrievingCall(userId, transferId, _callback);
        return localVarCall;

    }

    /**
     * Get user&#39;s transfer
     * Get user&#39;s transfer. User&#39;s transfer is retrieved.
     *
     * @param userId     Id of user (required)
     * @param transferId Id of transfer (required)
     * @return UserTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User&#39;s transfers </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public UserTransfer userTransferRetrieving(Long userId, Long transferId) throws ApiException {
        ApiResponse<UserTransfer> localVarResp = userTransferRetrievingWithHttpInfo(userId, transferId);
        return localVarResp.getData();
    }

    /**
     * Get user&#39;s transfer
     * Get user&#39;s transfer. User&#39;s transfer is retrieved.
     *
     * @param userId     Id of user (required)
     * @param transferId Id of transfer (required)
     * @return ApiResponse&lt;UserTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User&#39;s transfers </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UserTransfer> userTransferRetrievingWithHttpInfo(Long userId, Long transferId) throws ApiException {
        okhttp3.Call localVarCall = userTransferRetrievingValidateBeforeCall(userId, transferId, null);
        Type localVarReturnType = new TypeToken<UserTransfer>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user&#39;s transfer (asynchronously)
     * Get user&#39;s transfer. User&#39;s transfer is retrieved.
     *
     * @param userId     Id of user (required)
     * @param transferId Id of transfer (required)
     * @param _callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User&#39;s transfers </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call userTransferRetrievingAsync(Long userId, Long transferId, final ApiCallback<UserTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = userTransferRetrievingValidateBeforeCall(userId, transferId, _callback);
        Type localVarReturnType = new TypeToken<UserTransfer>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for userTransfersRetrieving
     *
     * @param userId    Id of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User&#39;s transfers </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call userTransfersRetrievingCall(Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/transfers"
                .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userTransfersRetrievingValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userTransfersRetrieving(Async)");
        }


        okhttp3.Call localVarCall = userTransfersRetrievingCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Get user&#39;s transfers
     * Get user&#39;s transfers. User&#39;s transfers are retrieved.
     *
     * @param userId Id of user (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User&#39;s transfers </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public List<Object> userTransfersRetrieving(Long userId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = userTransfersRetrievingWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get user&#39;s transfers
     * Get user&#39;s transfers. User&#39;s transfers are retrieved.
     *
     * @param userId Id of user (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User&#39;s transfers </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<Object>> userTransfersRetrievingWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = userTransfersRetrievingValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user&#39;s transfers (asynchronously)
     * Get user&#39;s transfers. User&#39;s transfers are retrieved.
     *
     * @param userId    Id of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User&#39;s transfers </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> General application error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call userTransfersRetrievingAsync(Long userId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userTransfersRetrievingValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
